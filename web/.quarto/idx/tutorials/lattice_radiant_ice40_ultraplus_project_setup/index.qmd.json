{"title":"Lattice Radiant iCE40 UltraPlus Project Setup","markdown":{"yaml":{"title":"Lattice Radiant iCE40 UltraPlus Project Setup"},"headingText":"Project Setup","containsRefs":false,"markdown":"\n\n\nOpen Lattice Radiant. If you are prompted for a license file, navigate to it. See the Radiant install instructions if needed.\n\nCreate a new project and name it \"iCE40_demo\". Select the project location in the directory you wish. **Make sure that the path does not include spaces since this often leads to errors later in the synthesis process.** You do not need to add any existing HDL files to the project.\n\nIn the \"Select Device\" menu, select the `iCE40UP5K` and the `SG48` package. On the next page, select `Lattice LSE` as the synthesis tool.\n\n::: {#fig-new-project-device}\n![](images/new_project_setup.png)\n\nNew project setup.\n:::\n\n# Project Implementation\n\nAfter the new project wizard completes, you will be presented with the following default screen.\n\n::: {#fig-project-summary}\n![](images/project_summary.png)\n\nNew project summary.\n:::\n\nNavigate to `File > New > New File` and select `SystemVerilog Files` in the New File selection window. Name your file `top` and click `New` to create the file.\n\n::: {#fig-create-file}\n![](images/create_file.png)\n\nCreate new file.\n:::\n\n# Implementing the Design in SystemVerilog\n\nIn this demo we will write HDL to blink the onboard LED at \\~1 Hz.\n\nTo do this, we will use the on-board iCE40 high-frequency oscillator to generate the clock signal and build a simple counter which will toggle at the desired frequency.\n\nSave the file and click the green play button in the GUI to run the synthesis process.\n\n```         \nmodule top(\n     input   logic reset,\n     output  logic led\n);\n\n   logic int_osc;\n   logic [24:0] counter;\n  \n   // Internal high-speed oscillator\n   HSOSC #(.CLKHF_DIV(2'b01)) \n         hf_osc (.CLKHFPU(1'b1), .CLKHFEN(1'b1), .CLKHF(int_osc));\n  \n   // Counter\n   always_ff @(posedge int_osc) begin\n     if(reset == 0)  counter <= 0;\n     else            counter <= counter + 1;\n   end\n  \n   // Assign LED output\n   assign led = counter[24];\n  \nendmodule\n```\n\nNote that we configure our reset to be active low (reset when 0 or connected to ground) since we have internal pullup resistors which make it easy to pull the pin high but not internal pulldown resistors.\n\nIn this design we use the HSOSC module which is the high-speed oscillator available on the iCE40UP5K chip. The HSOSC module is a Verilog library that is provided with the iCE40 device support package in Radiant. You can find more information about the oscillator under `Help > Lattice Radiant Software Help > Reference Guides > FPGA Libraries Reference Guide > Primitive Library - iCE40UP (iCE40 UltraPlus)`. Here, as an example of how to infer a modules with parameters in Verilog, we instantiate it with the optional parameter `CLKHF_DIV` which sets the output frequency to 24 MHz.\n\n::: {#fig-hsosc}\n![](images/HSOSC.png)\n\nHigh-speed oscillator block diagram.\n:::\n\n## Netlist Analyzer\n\nAfter synthesizing your design, it is worth taking a look at the Netlist Analyzer. This tool provides a block diagram view of the design. This is a helpful tool to make sure that the Verilog you wrote is implying the hardware that you intend. **Remember that as a digital designer you should always think about the underlying hardware and simply write the Verilog idioms to imply it.** Approach HDL like a traditional programming language at your peril!\n\nIf we look at the Netlist Analyzer (found under \"Tools \\> Netlist Analyzer\" or the green and black icon in the toolbar), we will open a window which shows a block diagram. We see that we have implied an adder, a mux to control the value to the registers, the HSOSC module, and a 25-bit-wide register.\n\n::: {#fig-netlist-analyzer}\n![](images/netlist_analyzer.png)\n\nNetlist analyzer window.\n:::\n\n## Resource Usage\n\nThere is also some useful information in the Reports tab under Project Summary in the Resource Usage section. In particular, this section will show us the number of registers, look-up tables, IO buffers, and embedded RAM blocks (EBRs) that we have implied in our design. For this design, we have 25 registers for storing the current count. An additional 3 logic cells are needed for their LUT4s to provide the additional logic (adder, mux, inverter).\n\n::: {#fig-resource-usage}\n![](images/reports.png)\n\nResource usage report.\n:::\n\n## Device Assignment: Device Constraint Editor\n\nWhen you first synthesize the design, the inputs and outputs of your top-level module will be randomly assigned to I/O pins. Next, you need to set the pin assignments to route the signals to the I/O pins that you desire.\n\nOpen the Device Constraint Editor and find the signal name and assign it to your desired pin. In this example, we will route the \"led\" output to GPIO 42. Select the table entry in the \"Pin\" column associated with the LED signal and enter \"42\". You will notice that the currently routed pin is labeled in parentheses, 36 in this example. To update the design to route to our desired GPIO pin, we need to resynthesize the design. Click the green play button again to run the toolchain. When you do this for the first time, you will be asked to save a .pdc (pin device constraint) file. Name and save the file. After synthesis completes, open the Device Constraint Editor and confirm that the desired and routed pins match. In this case you should see \"42(42)\" in the table entry corresponding to the led output.\n\n::: {#fig-pinout}\n![](images/pinout.png)\n\nPinout diagram.\n:::\n\n## Device Programming\n\nTo get our design working on our board, we need to program it to the flash memory onboard the UPduino board.\n\nEach time the FPGA powers up or resets, it reconfigures itself over a serial peripheral interface (SPI) connection from a binary (.bin) configuration file on a flash memory chip.\n\nTo program the device, we need to set up the programmer to put the .bin file that is generated by our synthesis tool onto the flash chip.\n\nClick the button in the toolbar to open the programmer (the icon is the chip with a blue arrow pointing downward) or using the menu Tools \\> Programmer.\n\nConnect your UPduino board to your computer and click the \"Detect Cable\" button in the \"Cable Setup\" sub-window on the right of the Programmer window. You should see a message noting that \"INFO - Board with FTDI USB Host Chip detected.\" in the output window. If the host chip is not detected, you may need to install FTDI drivers for the device.\n\nNext we need to correctly configure the programming toolchain to program our device. By default, the UPduino board only enables programming of the flash chip on board and not the onboard compressed random access memory (CRAM) of the FPGA itself. To do this, highlight the device in the list view and open the \"Device Properties\" window either by using the icon in the toolbar (chip with pencil on top) or by right-clicking on the entry in the table and selecting the \"Device Properties\" option.\n\nChange the default entries to the following selections:\n\n-   Set Target Memory to `External SPI Flash Memory`\n-   Set operation to `Erase, Program, Verify`\n-   Under SPI Flash Options set\n    -   Family: `SPI Serial Flash`\n    -   Vendor: `WinBond`\n    -   Device: `W25Q32JV`\n    -   Package: `208mil 8-pin SOIC`\n\nAfter configuration, the block diagram should look like this.\n\n![Flash programming setup.](images/programming.png){#fig-flash-programming}\n\nAfter updating the configuration, you are ready to program the device. (Note: on your first run, you may get a firewall warning that a new program \"cableserver\" is being run and needs access. Allow access to the program.)\n\nYou should see a series of outputs printing in the output window as the programmer cycles through the various pieces of the programming process (initialization, enabling, erasing, programming, verifying, etc.). After the programming finishes, you should see a message that the programming operation was successful.\n\n# Testing in Hardware\n\n![Simple circuit to blink an LED.](images/blink_led_schematic.png){#fig-led-blink fig-align=\"center\" width=\"50%\"}\n\nIf you are using the E155 development board, you should see the onboard LED connected to P42 blinking. If you would like to test the hardware separately with just the UPduino you can unplug the USB from your board and connect your UPduino board to a breadboard, wiring up an LED in series with a current limiting resistor (typically a value between 330 Ω and 1kΩ is a good choice). Then, reconnect your board to power via USB or using the +5V input on the board from a DC power supply.","srcMarkdownNoYaml":"\n\n# Project Setup\n\nOpen Lattice Radiant. If you are prompted for a license file, navigate to it. See the Radiant install instructions if needed.\n\nCreate a new project and name it \"iCE40_demo\". Select the project location in the directory you wish. **Make sure that the path does not include spaces since this often leads to errors later in the synthesis process.** You do not need to add any existing HDL files to the project.\n\nIn the \"Select Device\" menu, select the `iCE40UP5K` and the `SG48` package. On the next page, select `Lattice LSE` as the synthesis tool.\n\n::: {#fig-new-project-device}\n![](images/new_project_setup.png)\n\nNew project setup.\n:::\n\n# Project Implementation\n\nAfter the new project wizard completes, you will be presented with the following default screen.\n\n::: {#fig-project-summary}\n![](images/project_summary.png)\n\nNew project summary.\n:::\n\nNavigate to `File > New > New File` and select `SystemVerilog Files` in the New File selection window. Name your file `top` and click `New` to create the file.\n\n::: {#fig-create-file}\n![](images/create_file.png)\n\nCreate new file.\n:::\n\n# Implementing the Design in SystemVerilog\n\nIn this demo we will write HDL to blink the onboard LED at \\~1 Hz.\n\nTo do this, we will use the on-board iCE40 high-frequency oscillator to generate the clock signal and build a simple counter which will toggle at the desired frequency.\n\nSave the file and click the green play button in the GUI to run the synthesis process.\n\n```         \nmodule top(\n     input   logic reset,\n     output  logic led\n);\n\n   logic int_osc;\n   logic [24:0] counter;\n  \n   // Internal high-speed oscillator\n   HSOSC #(.CLKHF_DIV(2'b01)) \n         hf_osc (.CLKHFPU(1'b1), .CLKHFEN(1'b1), .CLKHF(int_osc));\n  \n   // Counter\n   always_ff @(posedge int_osc) begin\n     if(reset == 0)  counter <= 0;\n     else            counter <= counter + 1;\n   end\n  \n   // Assign LED output\n   assign led = counter[24];\n  \nendmodule\n```\n\nNote that we configure our reset to be active low (reset when 0 or connected to ground) since we have internal pullup resistors which make it easy to pull the pin high but not internal pulldown resistors.\n\nIn this design we use the HSOSC module which is the high-speed oscillator available on the iCE40UP5K chip. The HSOSC module is a Verilog library that is provided with the iCE40 device support package in Radiant. You can find more information about the oscillator under `Help > Lattice Radiant Software Help > Reference Guides > FPGA Libraries Reference Guide > Primitive Library - iCE40UP (iCE40 UltraPlus)`. Here, as an example of how to infer a modules with parameters in Verilog, we instantiate it with the optional parameter `CLKHF_DIV` which sets the output frequency to 24 MHz.\n\n::: {#fig-hsosc}\n![](images/HSOSC.png)\n\nHigh-speed oscillator block diagram.\n:::\n\n## Netlist Analyzer\n\nAfter synthesizing your design, it is worth taking a look at the Netlist Analyzer. This tool provides a block diagram view of the design. This is a helpful tool to make sure that the Verilog you wrote is implying the hardware that you intend. **Remember that as a digital designer you should always think about the underlying hardware and simply write the Verilog idioms to imply it.** Approach HDL like a traditional programming language at your peril!\n\nIf we look at the Netlist Analyzer (found under \"Tools \\> Netlist Analyzer\" or the green and black icon in the toolbar), we will open a window which shows a block diagram. We see that we have implied an adder, a mux to control the value to the registers, the HSOSC module, and a 25-bit-wide register.\n\n::: {#fig-netlist-analyzer}\n![](images/netlist_analyzer.png)\n\nNetlist analyzer window.\n:::\n\n## Resource Usage\n\nThere is also some useful information in the Reports tab under Project Summary in the Resource Usage section. In particular, this section will show us the number of registers, look-up tables, IO buffers, and embedded RAM blocks (EBRs) that we have implied in our design. For this design, we have 25 registers for storing the current count. An additional 3 logic cells are needed for their LUT4s to provide the additional logic (adder, mux, inverter).\n\n::: {#fig-resource-usage}\n![](images/reports.png)\n\nResource usage report.\n:::\n\n## Device Assignment: Device Constraint Editor\n\nWhen you first synthesize the design, the inputs and outputs of your top-level module will be randomly assigned to I/O pins. Next, you need to set the pin assignments to route the signals to the I/O pins that you desire.\n\nOpen the Device Constraint Editor and find the signal name and assign it to your desired pin. In this example, we will route the \"led\" output to GPIO 42. Select the table entry in the \"Pin\" column associated with the LED signal and enter \"42\". You will notice that the currently routed pin is labeled in parentheses, 36 in this example. To update the design to route to our desired GPIO pin, we need to resynthesize the design. Click the green play button again to run the toolchain. When you do this for the first time, you will be asked to save a .pdc (pin device constraint) file. Name and save the file. After synthesis completes, open the Device Constraint Editor and confirm that the desired and routed pins match. In this case you should see \"42(42)\" in the table entry corresponding to the led output.\n\n::: {#fig-pinout}\n![](images/pinout.png)\n\nPinout diagram.\n:::\n\n## Device Programming\n\nTo get our design working on our board, we need to program it to the flash memory onboard the UPduino board.\n\nEach time the FPGA powers up or resets, it reconfigures itself over a serial peripheral interface (SPI) connection from a binary (.bin) configuration file on a flash memory chip.\n\nTo program the device, we need to set up the programmer to put the .bin file that is generated by our synthesis tool onto the flash chip.\n\nClick the button in the toolbar to open the programmer (the icon is the chip with a blue arrow pointing downward) or using the menu Tools \\> Programmer.\n\nConnect your UPduino board to your computer and click the \"Detect Cable\" button in the \"Cable Setup\" sub-window on the right of the Programmer window. You should see a message noting that \"INFO - Board with FTDI USB Host Chip detected.\" in the output window. If the host chip is not detected, you may need to install FTDI drivers for the device.\n\nNext we need to correctly configure the programming toolchain to program our device. By default, the UPduino board only enables programming of the flash chip on board and not the onboard compressed random access memory (CRAM) of the FPGA itself. To do this, highlight the device in the list view and open the \"Device Properties\" window either by using the icon in the toolbar (chip with pencil on top) or by right-clicking on the entry in the table and selecting the \"Device Properties\" option.\n\nChange the default entries to the following selections:\n\n-   Set Target Memory to `External SPI Flash Memory`\n-   Set operation to `Erase, Program, Verify`\n-   Under SPI Flash Options set\n    -   Family: `SPI Serial Flash`\n    -   Vendor: `WinBond`\n    -   Device: `W25Q32JV`\n    -   Package: `208mil 8-pin SOIC`\n\nAfter configuration, the block diagram should look like this.\n\n![Flash programming setup.](images/programming.png){#fig-flash-programming}\n\nAfter updating the configuration, you are ready to program the device. (Note: on your first run, you may get a firewall warning that a new program \"cableserver\" is being run and needs access. Allow access to the program.)\n\nYou should see a series of outputs printing in the output window as the programmer cycles through the various pieces of the programming process (initialization, enabling, erasing, programming, verifying, etc.). After the programming finishes, you should see a message that the programming operation was successful.\n\n# Testing in Hardware\n\n![Simple circuit to blink an LED.](images/blink_led_schematic.png){#fig-led-blink fig-align=\"center\" width=\"50%\"}\n\nIf you are using the E155 development board, you should see the onboard LED connected to P42 blinking. If you would like to test the hardware separately with just the UPduino you can unplug the USB from your board and connect your UPduino board to a breadboard, wiring up an LED in series with a current limiting resistor (typically a value between 330 Ω and 1kΩ is a good choice). Then, reconnect your board to power via USB or using the +5V input on the board from a DC power supply."},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"highlight-style":"ally","output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.330","_quarto-vars":{"microps-color":null},"theme":["cosmo","../../custom.scss"],"monobackgroundcolor":"transparent","title":"Lattice Radiant iCE40 UltraPlus Project Setup"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}